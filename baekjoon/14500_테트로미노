import java.io.*;
import java.util.*;

public class Main {
	static int N, M, answer;
	static int[][] map;
	static boolean[][] visited;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		answer = 0;

		map = new int[N][M];
		visited = new boolean[N][M];
		for (int n = 0; n < N; n++) {
			st = new StringTokenizer(br.readLine());
			for (int m = 0; m < M; m++) {
				map[n][m] = Integer.parseInt(st.nextToken());
			}
		}

		for (int n = 0; n < N; n++) {
			for (int m = 0; m < M; m++) {
				visited[n][m] = true;
				dfs(n, m, 1, map[n][m]);
				h(n,m);
				visited[n][m] = false;
			}
		}

		System.out.println(answer);

	}

	static int dr[] = { -1, 1, 0, 0 };
	static int dc[] = { 0, 0, -1, 1 };

	public static void dfs(int r, int c, int count, int sum) {
		if (count > 3) {
			answer = Math.max(sum, answer);
			return;
		}
		for (int i = 0; i < 4; i++) {
			int nr = r + dr[i];
			int nc = c + dc[i];

			if (nr < 0 || nc < 0 || nc >= M || nr >= N)
				continue;
			if (!visited[nr][nc]) {
				visited[nr][nc] = true;
				dfs(nr, nc, count + 1, sum + map[nr][nc]);
				visited[nr][nc] = false;
			}
		}
	}

	public static void h(int r, int c) {
		// ㅏ
		if (r + 2 < N && c + 1 < M)
			answer = Math.max(answer, map[r][c] + map[r + 1][c] + map[r + 2][c] + map[r + 1][c + 1]);
		// ㅓ
		if (r + 2 < N && c - 1 >= 0)
			answer = Math.max(answer, map[r][c] + map[r + 1][c] + map[r + 2][c] + map[r + 1][c - 1]);
		// ㅗ
		if (c + 2 < M && r - 1 >= 0)
			answer = Math.max(answer, map[r][c] + map[r][c+1] + map[r][c+2] + map[r-1][c + 1]);
		// ㅜ
		if (c + 2 < M && r + 1 < N)
			answer = Math.max(answer, map[r][c] + map[r][c+1] + map[r][c+2] + map[r+1][c + 1]);
	}

}
